-------------------------------------------------------------------------
--						CONTRAINTES STRUCTURELLES					   --
-------------------------------------------------------------------------

--- GROUPE 
	-- CONTRAINTE BOOLEAN
	
Alter table GROUPE
	add constraint GROUP_STRUCT_DOMAINE_1 Check (TRICAZEN in (0,1)); 
Alter table GROUPE
	add constraint GROUP_STRUCT_DOMAINE_2 Check (VICAZEN in (0,1)); 
Alter table GROUPE
	add constraint GROUP_STRUCT_DOMAINE_3 Check (PLACEBO in (0,1)); 
Alter table GROUPE
	add constraint GROUP_STRUCT_DOMAINE_4 Check (ALTERNE in (0,1)); 
Alter table GROUPE
	add constraint GROUP_STRUCT_DOMAINE_5 Check (ALTERNE BETWEEN 1 AND 7); 
	
	
---PATIENT
	--CONTRAINTE DU SEXE : CHECK
Alter table PATIENT 
	add constraint PAT_STRUCT_DOMAINE_1 Check (SEXE in ('H','F')); 
	-- CONTRAINTE DU BOOLEAN EXCLUSIF: CHECK
Alter table PATIENT 
	add constraint PAT_STRUCT_DOMAINE_2 Check (EXCLU in (0,1)); 
	

--- PATHOLOGIE
		--CONTRAINTE PATHOLOGIE A RISQUE ET PATHOLOGIE EXCLU: CHECK
Alter table PATHOLOGIE 
	add constraint PATHO_STRUCT_DOMAINE_1 Check (PATHOEXCLU in (0,1) and (PathoARisque in (0,1));

--- APPORTE
		--CONTRAINTE BOOLEAN ERREUR LOT: CHECK
Alter table APPORTE
	add constraint APPORT_STRUCT_DOMAINE_1 Check (ERREURLOT in (0,1)); 
	
						     
---- ELECTROENCEPHALOGRAMME
	-- CONTRAINTE POUR LES VALEURS DE RESULTATS = CHECK
Alter table ELECTROENCEPHALOGRAMME
	add constraint ELECTRO_STRUCT_DOMAINE_1 Check (RESULTATELECTRO BETWEEN 1 AND 10);


---- FICHE
	-- CONTRAINTES BOOLEAN : CHECK
Alter table FICHE
	add constraint FICHE_STRUCT_DOMAINE_1 Check (VALIDER_MED in (0,1)); 
Alter table FICHE
	add constraint FICHE_STRUCT_DOMAINE_2 Check (VALIDER_ADRC in (0,1)); 


---- LOT

	-- CONTRAINTE BOOLEAN: CHECK	
Alter table LOT
	add constraint LOT_STRUCT_DOMAINE_1 Check (TRICAZEN in (0,1)); 
Alter table LOT
	add constraint LOT_STRUCT_DOMAINE_2 Check (VICAZEN in (0,1)); 
Alter table LOT
	add constraint LOT_STRUCT_DOMAINE_3 Check (PLACEBO in (0,1)); 

--- ANALYSESANG
	-- TRIGGER POUR NORME DE CONCENTRATION ET REPROGRAMMATION SI HORS NORME
CREATE OR REPLACE TRIGGER ANA_STRUCT_DOMAINE_1
BEFORE INSERT ON ANALYSESANG
FOR EACH ROW
BEGIN
	IF :NEW.PLAQUETTES>1000000 OR :NEW.PLAQUETTES<5000 THEN
		RAISE_APPLICATION_ERROR(-200010,'VALEUR PLAQUETTES ABERRANTE');
	END IF;
	IF :NEW.POTASSIUM<0.1 OR :NEW.POTASSIUM>10 THEN
		RAISE_APPLICATION_ERROR(-200011,'VALEUR POTASSIUM ABERRANTE');
	END IF;
	IF :NEW.SODIUM>200 OR :NEW.SODIUM<100 THEN
		RAISE_APPLICATION_ERROR(-200012,'VALEUR SODIUM ABERRANTE');
	END IF;
	IF :NEW.PROTIDEMIE<10 OR :NEW.PROTIDEMIE>150 THEN
		RAISE_APPLICATION_ERROR(-200013,'VALEUR PROTIDEMIE ABERRANTE');
	END IF;
	IF :NEW.CALCIUM<0.5 OR :NEW.CALCIUM>6 THEN
		RAISE_APPLICATION_ERROR(-200014,'VALEUR CALCIUM ABERRANTE');
	END IF;
END;						    
-------------------------------------------------------------------------
--						CONTRAINTES NON STRUCTURELLES				   --
-------------------------------------------------------------------------

--- PATIENT
	--- TRIGGER QUI PERMET QU'UN PATIENT AGE DE PLUS DE 55 ANS SUIT UN TRAITEMENT A BASE DE PLACEBO EXCLUSIVEMENT
CREATE OR REPLACE TRIGGER PAT_NONSTRUCT_LOGIQUE_1
BEFORE INSERT OR UPDATE ON PATIENT
FOR EACH ROW
DECLARE
  tricazen number(1);
  vicazen number(1);
  alterne number(1);
BEGIN
  SELECT TRICAZEN, VICAZEN, ALTERNE INTO tricazen, vicazen, alterne FROM GROUPE WHERE :new.GRO_IDGROUPE = IDGROUPE;
	IF :new.AGEP > 55 AND tricazen = 1 AND vicazen = 1 AND alterne = 0 THEN -- Groupe 1 sans placebo
		RAISE_APPLICATION_ERROR(-20002,'Erreur, un patient de plus de 55 ans ne peut pas être dans un groupe sans Placebo');
	END IF;
END;
/

CREATE or REPLACE TRIGGER PAT_NONSTRUCT_QUALI_1
BEFORE INSERT OR UPDATE ON PATIENT
FOR EACH ROW
BEGIN
	IF :new.AGEP > 60 OR :new.AGEP < 25 THEN
		RAISE_APPLICATION_ERROR(-20002,'Erreur, age du patient doit etre compris entre 25 et 60 ans');
	END IF;
END;/

--- MEDECIN
--- DATAMANAGER 
--- PATHOLOGIE
--- CENTRE
--- ATTACHEDERECHERCHECLINIQUE
--- PHARMACIEN
--- INFIRMIERE
--- TRAITEMENT

--- SOINS
	--- MISE A JOUR DU BOOLEAN EXCLU DU PATIENT SI IL COMPORTE UNE PATHOLOGIE EXCLUANTE

CREATE OR REPLACE TRIGGER SOINS_NONSTRUCT_QUALI_1 
BEFORE INSERT OR UPDATE ON SOINS
FOR EACH ROW
BEGIN
    SELECT PATHOEXCLU INTO TEST FROM PATHOLOGIE WHERE IDPATHO=PAT_IDPATHO;
        IF TEST=1 THEN
            UPDATE PATIENT SET PATHOEXCLU=1 WHERE IDPATIENT=PAT_IDPATIENT;
        END IF;
END;
/

--- APPORTE
	--- TRIGGER QUI VERIFIE LA CONCORDANCE ENTRE LE DEBUT DE IDLOT ET L'ID DU PATIENT
CREATE OR REPLACE TRIGGER APPORT_NONSTRUCT_LOGIQUE_1 
BEFORE INSERT OR UPDATE ON APPORTE
FOR EACH ROW
DECLARE
  nb number;
BEGIN
  SELECT COUNT(*) INTO nb FROM APPORTE WHERE REGEXP_LIKE(:new.LOT_IDLOT,'^'|| :new.PAT_IDPATIENT || '.+'); -- Match avec numéro patient en début de ligne
  IF nb = 0 THEN
		RAISE_APPLICATION_ERROR(-20002,'Erreur, lot non destiné à ce patient');
  END IF;
END;
/

	--- TRIGGER QUI COMPARE LA COMPOSITION DU LOT ET LE GROUPE ASSOCIE AU PATIENT QUI A PRIS CE LOT
CREATE OR REPLACE TRIGGER APPORT_NONSTRUCT_LOGIQUE_2
AFTER INSERT OR UPDATE ON APPORTE
FOR EACH ROW
DECLARE
  	tricazen number(1);
  	vicazen number(1);
  	placebo number(1);
  	ok number(1);
	numGroupe number;
	jourEtude number;
BEGIN
	SELECT TRICAZEN, VICAZEN, PLACEBO INTO tricazen, vicazen, placebo FROM LOT WHERE :new.LOT_IDLOT = IDLOT;
	SELECT GRO_IDGROUPE INTO numGroupe FROM PATIENT WHERE :new.PAT_IDPATIENT = IDPATIENT;	
	SELECT TRUNC((SYSDATE - DATE_ARRI)+1) INTO jourEtude FROM PATIENT WHERE :new.PAT_IDPATIENT = IDPATIENT;
	ok := 0;
	CASE
		WHEN numGroupe = 1 THEN -- Groupe Vicazen Tricazen sans alternance
			IF tricazen = 1 AND vicazen = 1 AND placebo = 0 THEN
				ok := 1;
			END IF;	
		WHEN numGroupe = 2 THEN -- Groupe Vicazen Tricazen avec alternance
			IF MOD(jourEtude,2) = 0 THEN -- Jour paire
				IF tricazen = 1 AND vicazen = 1 AND placebo = 0 THEN 
					ok := 1;
				END IF;
			ELSE -- Jour impaire
				IF placebo = 1 AND tricazen = 0 AND vicazen = 0 THEN -- Alternance et prise de placebos
					ok := 1;
				END IF;
			END IF;	
		WHEN numGroupe = 3 THEN -- Tricazen Placebo sans alternance
			IF tricazen = 1 AND vicazen = 0 AND placebo = 1 THEN
				ok := 1;
			END IF;
		WHEN numGroupe = 4 THEN -- Tricazen Placebo avec alternance
			IF MOD(jourEtude,2) = 0 THEN -- Jour paire
				IF tricazen = 1 AND vicazen = 0 AND placebo = 1 THEN 
					ok := 1;
				END IF;
			ELSE -- Jour impaire
				IF placebo = 1 AND tricazen = 0 AND vicazen = 0 THEN -- Alternance et prise de placebos
					ok := 1;
				END IF;
			END IF;
		WHEN numGroupe = 5 THEN -- Vicazen Placebo sans alternance
			IF vicazen = 1 AND tricazen = 0 AND placebo = 1 THEN
				ok := 1;
			END IF;
		WHEN numGroupe = 6 THEN -- Vicazen Placebo avec alternance
			IF MOD(jourEtude,2) = 0 THEN -- Jour paire
				IF vicazen = 1 AND tricazen = 0 AND placebo = 1 THEN 
					ok := 1;
				END IF;
			ELSE -- Jour impaire
				IF placebo = 1 AND tricazen = 0 AND vicazen = 0 THEN -- Alternance et prise de placebos
					ok := 1;
				END IF;
			END IF;
		WHEN numGroupe = 7 THEN -- Placebo Placebo
			IF placebo = 1 AND tricazen = 0 AND vicazen = 0 THEN
				ok := 1;
			END IF;
	END CASE;
	IF ok = 0 THEN -- Mauvais lot donné au patient
		UPDATE PATIENT SET EXCLU = 1 WHERE IDPATIENT = :new.PAT_IDPATIENT; -- Exclusion de l'étude
	END IF;
END;


--- ANALYSESANG
	--- TRIGGER QUI VERIFIE QU'UN PATIENT N'EST PAS EXCLU AVANT D'ENREGISTRER L'ANALYSE
CREATE OR REPLACE TRIGGER ANA_NONSTRUCT_LOGIQUE_1  
BEFORE INSERT ON ANALYSESANG
FOR EACH ROW
DECLARE
	numPatient number;
	exclu number(1);
BEGIN
	SELECT PAT_IDPAT INTO numPatient FROM FICHE WHERE :new.ANA_ID_FICHE = IDFICHE;
	SELECT EXCLU INTO exclu FROM PATIENT WHERE numPatient = IDPATIENT;

	IF exclu = 1 THEN
		RAISE_APPLICATION_ERROR(-20002,'Erreur, ce patient est exclu');
	END IF;
END;
/

	--- TRIGGER QUI VERIFIE QU'UN PATIENT A BIEN UNE ANALYSE DE SANG DE PROGRAMMEE AVANT D'ENREGISTRER LES RESULTATS
CREATE OR REPLACE TRIGGER ANA_NONSTRUCT_LOGIQUE_2
BEFORE INSERT ON ANALYSESANG
FOR EACH ROW
DECLARE
	numPatient number;
	jourEtude number;
	dateAnalyseSang number;
BEGIN
	SELECT PAT_IDPAT INTO numPatient FROM FICHE WHERE :new.ANA_ID_FICHE = IDFICHE;
	SELECT TRUNC((SYSDATE - DATE_ARRI)+1), DATE_ANA INTO jourEtude, dateAnalyseSang FROM PATIENT WHERE numPatient = IDPATIENT;

	IF jourEtude != dateAnalyseSang THEN
		RAISE_APPLICATION_ERROR(-20002,'Erreur, aucune analyse de sang n''est prévu à ce jour pour ce patient');
	END IF;
END;
/

	
--- ELECTROENCEPHALOGRAMME
	--- TRIGGER QUI VERIFIE QU'UN PATIENT N'EST PAS EXCLU AVANT D'ENREGISTRER L'ANALYSE
CREATE OR REPLACE TRIGGER ELECTRO_NONSTRUCT_LOGIQUE_1 
BEFORE INSERT ON ELECTROENCEPHALOGRAMME
FOR EACH ROW
DECLARE
	numPatient number;
	exclu number(1);
BEGIN
	SELECT PAT_IDPAT INTO numPatient FROM FICHE WHERE :new.ELECTRO_ID_FICHE = IDFICHE;
	SELECT EXCLU INTO exclu FROM PATIENT WHERE numPatient = IDPATIENT;

	IF exclu = 1 THEN
		RAISE_APPLICATION_ERROR(-20002,'Erreur, ce patient est exclu');
	END IF;
END;
/
						     
	--- TRIGGER QUI VERIFIE QU'UN PATIENT A BIEN UN ECG PROGRAMME AVANT D'ENREGISTRER LES RESULTATS
CREATE OR REPLACE TRIGGER ELECTRO_NONSTRUCT_LOGIQUE_2
BEFORE INSERT ON ELECTROENCEPHALOGRAMME
FOR EACH ROW
DECLARE
	numPatient number;
	jourEtude number;
	dateEnce number;
BEGIN
	SELECT PAT_IDPAT INTO numPatient FROM FICHE WHERE :new.ELECTRO_ID_FICHE = IDFICHE;
	SELECT TRUNC((SYSDATE - DATE_ARRI)+1), DATE_ENCE INTO jourEtude, dateEnce FROM PATIENT WHERE numPatient = IDPATIENT;

	IF jourEtude != dateEnce THEN
		RAISE_APPLICATION_ERROR(-20002,'Erreur, aucun électroencéphalogramme n''est prévu à ce jour pour ce patient');
	END IF;
END;
/

--- TESTEFFORT
	--- TRIGGER QUI VERIFIE QU'UN PATIENT N'EST PAS EXCLU AVANT D'ENREGISTRER LES RESULTATS
CREATE OR REPLACE TRIGGER TESTEFFORT_NONSTRUCT_LOGIQUE_1
BEFORE INSERT ON TESTEFFORT
FOR EACH ROW
DECLARE
	numPatient number;
	exclu number(1);
BEGIN
	SELECT PAT_IDPAT INTO numPatient FROM FICHE WHERE :new.TEST_ID_FICHE = IDFICHE;
	SELECT EXCLU INTO exclu FROM PATIENT WHERE numPatient = IDPATIENT;

	IF exclu = 1 THEN
		RAISE_APPLICATION_ERROR(-20002,'Erreur, ce patient est exclu');
	END IF;
END;
/
	-- TRIGGER QUI VERIFIE QUE LE PATIENT A BIEN UN TEST D'EFFORT DE PROGRAMME AVANT D'ENREGISTRER LES RESULTATS
CREATE OR REPLACE TRIGGER TESTEFFORT_NONSTRUCT_LOGIQUE_2
BEFORE INSERT ON TESTEFFORT
FOR EACH ROW
DECLARE
	numPatient number;
	jourEtude number;
	dateTestEffort number;
BEGIN
	SELECT PAT_IDPAT INTO numPatient FROM FICHE WHERE :new.TEST_ID_FICHE = IDFICHE;
	SELECT TRUNC((SYSDATE - DATE_ARRI)+1), DATE_TEST INTO jourEtude, dateTestEffort FROM PATIENT WHERE numPatient = IDPATIENT;

	IF jourEtude != dateTestEffort THEN
		RAISE_APPLICATION_ERROR(-20002,'Erreur, aucun test d''effort n''est prévu à ce jour pour ce patient');
	END IF;
END;
/

--- FICHE
	-- TRIGGER QUI VERIFIE LE PATIENT N'EST PAS EXCLU AVANT D'ENREGISTRER LES DONNEES DANS LA FICHE
CREATE OR REPLACE TRIGGER FICHE_NONSTRUCT_LOGIQUE_1
BEFORE INSERT ON FICHE
FOR EACH ROW
DECLARE
	exclu number(1);
BEGIN
	SELECT EXCLU INTO exclu FROM PATIENT WHERE :new.PAT_IDPAT = IDPATIENT;
	IF exclu = 1 THEN
		RAISE_APPLICATION_ERROR(-20002,'Erreur, ce patient est exclu');
	END IF;
END;
/
---- LOT
-------------------------------------------------------------------------
--						CONTRAINTES TEMPORELLES					       --
-------------------------------------------------------------------------

--- ANALYSESANG
	-- TRIGGER POUR VÉRIFIER SI 3 CONCENTRATIONS SONT EN DESSOUS DES NORMES AFIN DE REPROGRAMMER UNE ANALYSE LE LENDEMAIN
	-- SINON L'ANALYSE SERA REPROGRAMMÉE 5 JOURS APRÉS
CREATE OR REPLACE TRIGGER ANA_TEMPORELLE_EVOLUTION_1
AFTER INSERT ON ANALYSESANG
DECLARE
	HORSNORME INTEGER=0;
	NUMPAT INTEGER;
	NUMJOUR INTEGER;
FOR EACH ROW
BEGIN 
	SELECT PAT_IDPAT INTO NUMPAT FROM FICHE WHERE ANA_ID_FICHE=:NEW.IDFICHE;
	SELECT DATEFICHE INTO NUMJOUR FROM FICHE WHERE ANA_ID_FICHE=:NEW.IDFICHE;
	SELECT TRUNC((SYSDATE - DATE_ARRI)+1) INTO NUMJOUR FROM PATIENT WHERE NUMPAT = IDPATIENT;
	IF :NEW.PLAQUETTES>400000 OR :NEW.PLAQUETTES<150000 THEN
		HORSNORME+=1;
	END IF;
	IF :NEW.POTASSIUM>5 OR :NEW.POTASSIUM<3.5 THEN
		HORSNORME+=1;
	END IF;
	IF :NEW.SODIUM>143 OR :NEW.SODIUM<136 THEN
		HORSNORME+=1;
	END IF;
	IF :NEW.PROTIDEMIE>85 OR :NEW.PROTIDEMIE<65 THEN
		HORSNORME+=1;	
	IF :NEW.CALCIUM>2,78 OR :NEW.CALCIUM<2,14 THEN
		HORSNORME+=1;
	END IF;
	IF HORSNORME>=3 THEN
		UPDATE PATIENT SET DATE_ANA=NUMJOUR+1 WHERE NUMPAT=IDPATIENT;
	ELSE
		UPDATE PATIENT SET DATE_ANA=NUMJOUR+5 WHERE NUMPAT=IDPATIENT;
	END IF;
END;
/
	

---- ELECTROENCEPHALOGRAMME	
	-- TRIGGER POUR REPROGRAMMER UN ENCEPHALOGRAMME LE LENDEMAIN SI 2 VALEURS CONSÉCUTIVES SONT EN DESSOUS DE 3
CREATE OR REPLACE TRIGGER ELECTRO_AUTO_METIER
AFTER INSERT ON ELECTROENCEPHALOGRAMME
FOR EACH ROW
DECLARE	
	NUMPAT INTEGER;
    NUMJOUR INTEGER;
	RESPRECEDENT INTEGER;
    EXC INTEGER;
BEGIN
	SELECT PAT_IDPAT INTO NUMPAT FROM FICHE WHERE :NEW.ELECTRO_ID_FICHE=IDFICHE;
	SELECT RESULTATELECTRO INTO RESPRECEDENT FROM TEMPO_ELECTRO WHERE ELECTRO_ID_FICHE=NUMPAT;
    SELECT TRUNC((SYSDATE - DATE_ARRI)+1) INTO NUMJOUR FROM PATIENT WHERE IDPATIENT=NUMPAT;
    SELECT COUNT(*) INTO EXC FROM PATHOLOGIE INNER JOIN SOINS ON PATHOLOGIE.IDPATHO = SOINS.PAT_IDPATHO WHERE SOINS.PAT_IDPATHO = NUMPAT AND PATHOLOGIE.PATHOARISQUE = 1;
	IF :NEW.RESULTATELECTRO<3 THEN
		IF RESPRECEDENT <3 THEN
			UPDATE PATIENT SET DATE_ENCE=NUMJOUR+1 WHERE IDPATIENT=NUMPAT;
        END IF;
    ELSIF EXC>0 THEN
        UPDATE PATIENT SET DATE_ENCE=NUMJOUR+2 WHERE IDPATIENT=NUMPAT;
    ELSE
        UPDATE PATIENT SET DATE_ENCE=NUMJOUR+4 WHERE IDPATIENT=NUMPAT;
    END IF;
END;

--- TESTEFFORT
	-- TEST D'EFFORT RÉALISÉ TOUS LES 6 JOURS / TOUS LES 3 JOURS SI LE PATIENT A UNE PATHOLOGIE A RISQUE
CREATE OR REPLACE TRIGGER TESTEFF_TEMP_EVOLUTION_1
AFTER INSERT ON TESTEFFORT
FOR EACH ROW
DECLARE
	numPatient number;
	jourEtude number;
	dateTestEffort number;
	pathoRisque number;
BEGIN
	SELECT PAT_IDPAT INTO numPatient FROM FICHE WHERE :new.TEST_ID_FICHE = IDFICHE;
	SELECT COUNT(*) INTO pathoRisque FROM PATHOLOGIE INNER JOIN SOINS ON PATHOLOGIE.IDPATHO = SOINS.PAT_IDPATHO WHERE SOINS.PAT_IDPATHO = numPatient AND PATHOLOGIE.PATHOARISQUE = 1;
	SELECT TRUNC((SYSDATE - DATE_ARRI)+1), DATE_TEST INTO jourEtude FROM PATIENT WHERE numPatient = IDPATIENT;

	IF pathoRisque = 0 THEN
		UPDATE PATIENT SET DATE_TEST = jourEtude + 6 WHERE IDPATIENT = numPatient;
	ELSE 
		UPDATE PATIENT SET DATE_TEST = jourEtude + 3 WHERE IDPATIENT = numPatient;
	END IF;
END;
-------------------------------------------------------------------------
--					        	AUTOMATISATION			     		   --
-------------------------------------------------------------------------	

---PATIENT
		-- AUTOMATISATION MAJUSCULE
CREATE TRIGGER PAT_AUTO_LEXICO_1
BEFORE INSERT ON PATIENT
FOR EACH ROW
BEGIN
	:NEW.NOMP:=UPPER(:NEW.NOMP);
	:NEW.PRENOMP:=UPPER(:NEW.PRENOMP);
END;
/
		-- AUTOMATISATION IDPATIENT
CREATE SEQUENCE PATIENTID
	START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER PAT_AUTO_METIER_1
BEFORE INSERT ON PATIENT
FOR EACH ROW
BEGIN
	SELECT PATIENTID.NEXTVAL INTO :NEW.IDPATIENT FROM DUAL;
END;
/

---MEDECIN
		-- AUTOMATISATION MAJUSCULE
CREATE TRIGGER MED_AUTO_LEXICO_1
BEFORE INSERT ON MEDECIN
FOR EACH ROW
BEGIN
	:NEW.NOMMED:=UPPER(:NEW.NOMMED);
	:NEW.PRENOMMED:=UPPER(:NEW.PRENOMMED);
	:NEW.SPECIALITEMED:=UPPER(:NEW.SPECIALITEMED);
END;	
/
---DATAMANAGER
		-- AUTOMATISATION MAJUSCULE
CREATE TRIGGER DATAM_AUTO_LEXICO_1
BEFORE INSERT ON DATAMANAGER
FOR EACH ROW
BEGIN
	:NEW.NOMDM:=UPPER(:NEW.NOMDM);
	:NEW.PRENOMDM:=UPPER(:NEW.PRENOMDM);

END;
/
		-- AUTOMATISATION IDDM
CREATE SEQUENCE DATAMANAGERID
	START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER AUTOINC
BEFORE INSERT ON DATAMANAGER
FOR EACH ROW
BEGIN
	SELECT DATAMANAGERID.NEXTVAL INTO :NEW.IDDM FROM DUAL;
END;
/
--- PATHOLOGIE
		-- AUTOMATISATION MAJUSCULE
CREATE TRIGGER PATHO_AUTO_LEXICO_1
BEFORE INSERT ON PATHOLOGIE
FOR EACH ROW
BEGIN
	:NEW.NOMPATHO:=UPPER(:NEW.NOMPATHO);
END;
/
		-- AUTOMATISATION IDPATHO
CREATE SEQUENCE PATHOID
	START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AUTOINC
BEFORE INSERT ON PATHOLOGIE
FOR EACH ROW
BEGIN
	SELECT PATHOID.NEXTVAL INTO :NEW.IDPATHO FROM DUAL;
END;
/
	
---CENTRE
		-- AUTOMATISATION MAJUSCULE
CREATE TRIGGER CENTRE_AUTO_LEXICO_1
BEFORE INSERT ON CENTRE
FOR EACH ROW
BEGIN
	:NEW.NOMCENTRE:=UPPER(:NEW.NOMCENTRE);
	:NEW.RUECENTRE:=UPPER(:NEW.RUECENTRE);
	:NEW.VILLECENTRE:=UPPER(:NEW.VILLECENTRE);
END;
/
		-- AUTOMATISATION IDCENTRE
CREATE SEQUENCE CENTREID
	START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AUTOINC
BEFORE INSERT ON CENTRE
FOR EACH ROW
BEGIN
	SELECT CENTREID.NEXTVAL INTO :NEW.IDCENTRE FROM DUAL;
END;
/

---ATTACHEDERECHERCHECLINIQUE
		-- AUTOMATISATION MAJUSCULE
CREATE TRIGGER ADRC_AUTO_LEXICO_1
BEFORE INSERT ON ATTACHEDERECHERCHECLINIQUE
FOR EACH ROW
BEGIN
	:NEW.NOMADRC:=UPPER(:NEW.NOMADRC);
	:NEW.PRENOMADRC:=UPPER(:NEW.PRENOMADRC);
END;
/
		-- AUTOMATISATION IDADRC
CREATE SEQUENCE ADRCID
	START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AUTOINC
BEFORE INSERT ON ATTACHEDERECHERCHECLINIQUE
FOR EACH ROW
BEGIN
	SELECT ADRCID.NEXTVAL INTO :NEW.IDADRC FROM DUAL;
END;
/

---PHARMACIEN
		-- AUTOMATISATION MAJUSCULE
CREATE TRIGGER PHARMA_AUTO_LEXICO_1
BEFORE INSERT ON PHARMACIEN
FOR EACH ROW
BEGIN
	:NEW.NOMPHARMA:=UPPER(:NEW.NOMPHARMA);
	:NEW.PRENOMPHARMA:=UPPER(:NEW.PRENOMPHARMA);
END;
/
		-- AUTOMATISATION IDPHARMA
CREATE SEQUENCE PHARMACIENID
	START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AUTOINC
BEFORE INSERT ON PHARMACIEN
FOR EACH ROW
BEGIN
	SELECT PHARMACIENID.NEXTVAL INTO :NEW.IDPHARMA FROM DUAL;
END;
/

---INFIRMIERE
		-- AUTOMATISATION MAJUSCULE
CREATE TRIGGER INF_AUTO_LEXICO_1
BEFORE INSERT ON INFIRMIERE
FOR EACH ROW
BEGIN
	:NEW.NOMINF:=UPPER(:NEW.NOMINF);
	:NEW.PRENOMINF:=UPPER(:NEW.PRENOMINF);
END;
/
	-- AUTOMATISATION IDINF
CREATE SEQUENCE INFIRMIEREID
	START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AUTOINC
BEFORE INSERT ON INFIRMIERE
FOR EACH ROW
BEGIN
	SELECT INFIRMIEREID.NEXTVAL INTO :NEW.IDINF FROM DUAL;
END;
/

---TRAITEMENT
		-- AUTOMATISATION MAJUSCULE
CREATE TRIGGER TRAIT_AUTO_LEXICO_1
BEFORE INSERT ON TRAITEMENT
FOR EACH ROW
BEGIN
	:NEW.MOLECULE:=UPPER(:NEW.MOLECULE);
END;
/	
		-- AUTOMATISATION IDTRAIT
CREATE SEQUENCE TRAITEMENTID
	START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AUTOINC
BEFORE INSERT ON TRAITEMENT
FOR EACH ROW
BEGIN
	SELECT TRAITEMENTID.NEXTVAL INTO :NEW.IDTRAIT FROM DUAL;
END;
/
--- TESTEFFORT
		-- AUTOMATISATION IDTESTEFFORT
CREATE SEQUENCE TESTID
	START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AUTOINC
BEFORE INSERT ON TESTEFFORT
FOR EACH ROW
BEGIN
	SELECT TESTID.NEXTVAL INTO :NEW.IDTESTEFFORT FROM DUAL;
END;
--- ANALYSESANG
		-- AUTOMATISATION IDANALYSESANG
CREATE SEQUENCE ANALYSEID
	START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AUTOINC
BEFORE INSERT ON ANALYSESANG
FOR EACH ROW
BEGIN
	SELECT ANALYSEID.NEXTVAL INTO :NEW.IDANALYSESANG FROM DUAL;
END;
/
--- ELECTROENCEPHALOGRAMME
		-- AUTOMATISATION IDELECTRO
CREATE SEQUENCE ELECTROID
	START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AUTOINC
BEFORE INSERT ON ELECTROENCEPHALOGRAMME
FOR EACH ROW
BEGIN
	SELECT ELECTROID.NEXTVAL INTO :NEW.IDELECTRO FROM DUAL;
END;	
--- MEDECIN
		-- AUTOMATISATION IDMED
CREATE SEQUENCE MEDECINID
	START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AUTOINC
BEFORE INSERT ON MEDECIN
FOR EACH ROW
BEGIN
	SELECT MEDECINID.NEXTVAL INTO :NEW.IDMED FROM DUAL;
END;
/

--- FICHE
	-- AUTOMATISATION IDFICHE
CREATE SEQUENCE FICHEID
	START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AUTOINC
BEFORE INSERT ON FICHE
FOR EACH ROW
BEGIN
	SELECT FICHEID.NEXTVAL INTO :NEW.IDFICHE FROM DUAL;
END;






